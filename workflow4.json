{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $('WhatsApp Trigger').item.json.messages[0].text.body }}",
        "rules": {
          "rules": [
            {
              "operation": "startsWith",
              "value2": "=Hii",
              "output": "={{ 0 }}"
            },
            {
              "operation": "contains",
              "value2": "list",
              "output": 1
            },
            {
              "operation": "regex",
              "value2": "(search|find|looking|want).*property",
              "output": 2
            },
            {
              "operation": "contains",
              "value2": "profile",
              "output": 3
            },
            {
              "operation": "contains",
              "value2": "subscribe",
              "output": 3
            },
            {
              "operation": "contains",
              "value2": "verify",
              "output": 3
            },
            {
              "operation": "contains",
              "value2": "help",
              "output": 3
            }
          ]
        },
        "fallbackOutput": 0
      },
      "id": "19fbec28-4dfd-451a-82a5-9e217c75d9fa",
      "name": "AI Intent Classification",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [-3088, -320]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "response",
              "value": "🏠 **Property Listing Wizard**\n\n✨ Let's create your premium property listing!\n\n**Step 1: Property Type**\n\n🏘️ **1.** Residential (House/Apartment/Flat)\n🏢 **2.** Commercial (Office/Shop/Warehouse)\n🏭 **3.** Plot/Land (Agricultural/Residential)\n🏡 **4.** Villa/Bungalow\n🏨 **5.** Rental Property\n\n**Advanced AI Validation:** Our system will automatically verify your property details for accuracy and market compliance.\n\nReply with the number (1-5)"
            },
            {
              "name": "step",
              "value": "property_type_selection"
            }
          ]
        },
        "options": {

        }
      },
      "id": "43d1b8ec-ce7c-4aa2-8032-1084bae580dd",
      "name": "Smart Property Listing",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [-2416, -480]
    },
    {
      "parameters": {
        "options": {
          "maxTokens": 500,
          "temperature": 0.3
        },
        "requestOptions": {

        }
      },
      "id": "56e8c659-4d29-4eff-badd-ad2583d181df",
      "name": "AI Property Search Engine",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [-2864, -288],
      "credentials": {
        "openAiApi": {
          "id": "1Wuf9UX7nEku1gKb",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "additionalFields": {

        }
      },
      "id": "a42126f9-607d-4d1e-a3a4-730ced2857d8",
      "name": "Intelligent Property Search",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [-2640, -288],
      "credentials": {
        "postgres": {
          "id": "gi1asAwmFXpyRPSz",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Advanced secure link generation with JWT and analytics tracking\nconst jwt = require('jsonwebtoken');\nconst crypto = require('crypto');\n\nconst properties = $input.all();\nconst results = [];\nconst userPhone = $('Parse WhatsApp Data').item.json.phone;\n\nfor (const property of properties) {\n  // Generate secure JWT token with expiration\n  const token = jwt.sign(\n    {\n      propertyId: property.json.id,\n      recipientPhone: userPhone,\n      accessLevel: 'view',\n      exp: Math.floor(Date.now() / 1000) + (10 * 60), // 10 minutes\n      iat: Math.floor(Date.now() / 1000)\n    },\n    process.env.JWT_SECRET || 'your-ultra-secure-secret-key-change-this'\n  );\n  \n  // Generate unique tracking ID\n  const trackingId = crypto.randomUUID();\n  \n  const secureLink = `https://your-domain.com/secure-property/${token}?track=${trackingId}`;\n  \n  results.push({\n    ...property.json,\n    secureLink,\n    trackingId,\n    expiresAt: new Date(Date.now() + 10 * 60 * 1000).toISOString(),\n    accessCount: 0,\n    generatedFor: userPhone\n  });\n}\n\nreturn results;"
      },
      "id": "172a46eb-c24c-49af-ad96-075990ebf4d3",
      "name": "Generate Secure Property Links",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-2416, -288]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "response",
              "value": "🔍 **Intelligent Property Search Results**\n\n✨ Found **{{ $input.all().length }}** verified properties matching your criteria:\n\n{% for property in $input.all() %}\n🏠 **{{ property.title || 'Premium Property' }}**\n📍 **Location:** {{ property.location || 'Premium Location' }}\n💰 **Price:** ₹{{ property.price || 'Contact for Price' }}\n📐 **Area:** {{ property.area || 'N/A' }} sq ft\n🛏️ **Bedrooms:** {{ property.bedrooms || 'N/A' }}\n🚿 **Bathrooms:** {{ property.bathrooms || 'N/A' }}\n\n🔗 **[🔒 Secure View Details]({{ property.secureLink }})**\n⏱️ _Link expires in 10 minutes | Analytics tracked_\n\n💡 **Agent:** {{ property.agent_name || 'Verified Agent' }}\n📱 **Contact:** {{ property.agent_phone || 'Available on request' }}\n\n---\n{% endfor %}\n\n🎯 **Want more specific results?** \nTry: \"3BHK villa in Udaipur under 50 lakhs\"\n\n💎 **Upgrade to Premium** for unlimited searches and AI-powered recommendations!"
            }
          ]
        },
        "options": {

        }
      },
      "id": "68c9c2ab-9409-4944-a4b9-1f6f676cdba1",
      "name": "Format Search Results",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [-2192, -288]
    },
    {
      "parameters": {
        "operation": "select",
        "additionalFields": {

        }
      },
      "id": "6d6a0a59-e715-4bcd-ba8c-f2944858bc7a",
      "name": "Get User Profile",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [-2416, -96],
      "credentials": {
        "postgres": {
          "id": "gi1asAwmFXpyRPSz",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "response",
              "value": "👤 **Your Smart Profile Dashboard**\n\n📱 **Phone:** {{ $json.phone }}\n👤 **Name:** {{ $json.name }}\n✅ **Status:** {{ $json.verification_status === 'verified' ? '🔒 Verified Premium User' : '⏳ Pending Verification' }}\n🏷️ **Account Type:** {{ $json.user_type }}\n💎 **Plan:** {{ $json.subscription_plan || 'Basic' }}\n📅 **Member Since:** {{ $json.registration_date }}\n\n**🚀 Available Commands:**\n• `list` - List a property with AI validation\n• `search [query]` - Smart property search\n• `profile` - View/edit your profile\n• `subscribe` - Upgrade to premium plans\n• `analytics` - View your activity insights\n• `verify agent` - Become a verified agent\n• `help` - Get AI assistance\n\n**🔥 Quick Actions:**\n• Voice commands supported 🎙️\n• Multi-language support 🌐\n• Real-time market insights 📊"
            }
          ]
        },
        "options": {

        }
      },
      "id": "793c0e03-3c5e-49d7-965e-134dcbb0046e",
      "name": "Format Profile Dashboard",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [-2192, -96]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "response",
              "value": "💎 **Premium Subscription Plans**\n\n🆓 **Basic Plan (Current)**\n• 5 property listings/month\n• Basic search functionality\n• Standard support\n• Limited analytics\n\n⭐ **Premium Plan - ₹999/month**\n• ♾️ Unlimited property listings\n• 🤖 AI-powered property matching\n• 🔒 Advanced security features\n• 📊 Detailed analytics dashboard\n• 🚀 Priority customer support\n• 📱 Voice command support\n• 🎯 Smart lead generation\n\n🚀 **Enterprise Plan - ₹1999/month**\n• 👥 Multi-agent team support\n• 🎨 Custom branding options\n• 🔌 Full API access\n• 📈 Advanced market analytics\n• 🏢 Corporate dashboard\n• 💼 Dedicated account manager\n• ⚡ White-label solution\n• 🔐 Enterprise security\n\n**🎁 Special Offer:** 30% off first 3 months!\n\nReply with plan number:\n1️⃣ Keep Basic (Free)\n2️⃣ Upgrade to Premium\n3️⃣ Go Enterprise"
            }
          ]
        },
        "options": {

        }
      },
      "id": "79845ff5-e68d-4048-ab52-cd52b8027ba5",
      "name": "Show Premium Plans",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [-2416, 96]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "url": "https://api.razorpay.com/v1/payment_links",
        "options": {

        }
      },
      "id": "f8ad42e6-6454-4cf5-82df-b49b82055d73",
      "name": "Create RazorPay Payment",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [-2192, 96]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "response",
              "value": "👨‍💼 **Agent Verification Program**\n\n🔒 **Become a Verified Real Estate Agent**\n\n**Required Documents:**\n📄 **1.** Aadhar Card (Government ID)\n📋 **2.** Real Estate License (RERA Registration)\n🏢 **3.** Business Registration Certificate\n📞 **4.** Professional Contact Details\n💼 **5.** Experience Certificates\n🏦 **6.** Bank Account Verification\n\n**🎁 Agent Benefits:**\n• ✅ Verified Agent Badge\n• 🚀 Priority listing placement\n• 📊 Advanced analytics dashboard\n• 💰 Lead generation tools\n• 🤝 Direct client connections\n• 📱 Agent portfolio website\n• 💎 Premium support\n\n**📋 Verification Process:**\n1. Document submission\n2. AI-powered validation\n3. Manual review (24-48 hours)\n4. Video verification call\n5. Agent certification\n\n**Reply with 'START VERIFICATION' to begin the process.**\n\n🔐 All documents are encrypted and stored securely."
            }
          ]
        },
        "options": {

        }
      },
      "id": "aeec946c-26a4-4db4-a060-d03d2467e3a6",
      "name": "Agent Verification Process",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [-2192, 288]
    },
    {
      "parameters": {
        "options": {
          "maxTokens": 300,
          "temperature": 0.1
        },
        "requestOptions": {

        }
      },
      "id": "c8e0da9c-181e-4807-bf70-915d0757bcfa",
      "name": "AI Property Validator",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [-2192, -480],
      "credentials": {
        "openAiApi": {
          "id": "1Wuf9UX7nEku1gKb",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "table": "analytics",
        "columns": "user_phone,event_type,event_data,timestamp,session_id,user_agent,ip_address",
        "additionalFields": {

        }
      },
      "id": "d8941e05-f316-4aaf-a86b-6bf47df25985",
      "name": "Advanced Analytics Tracking",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [-1520, -96],
      "credentials": {
        "postgres": {
          "id": "gi1asAwmFXpyRPSz",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "finalResponse",
              "value": "={{ $json.response || '🤖 **AI Real Estate Assistant**\\n\\nI\\'m here to help you with all your property needs!\\n\\n**Quick Commands:**\\n• `list` - List your property\\n• `search [query]` - Find properties\\n• `profile` - View your account\\n• `subscribe` - Premium plans\\n• `verify agent` - Agent verification\\n• `help` - Get assistance\\n\\n**Voice Support:** Send voice messages for hands-free operation! 🎙️\\n\\n**Need help?** Just ask me anything about real estate!' }}"
            },
            {
              "name": "to",
              "value": "={{ $('Parse WhatsApp Data').item.json.phone }}"
            },
            {
              "name": "messageId",
              "value": "={{ 'msg_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9) }}"
            }
          ]
        },
        "options": {

        }
      },
      "id": "a364b1bf-3435-4ebf-abe5-b3ffb605ceb1",
      "name": "Format Final Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [-1968, -96]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "url": "https://graph.facebook.com/v18.0/YOUR_PHONE_NUMBER_ID/messages",
        "options": {

        }
      },
      "id": "b90e900c-951f-4db2-9b22-0dca77aacf54",
      "name": "Send WhatsApp Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [-1744, -96]
    },
    {
      "parameters": {
        "updates": [
          "messages"
        ],
        "options": {

        }
      },
      "id": "a19a2ec0-954e-47dd-90b9-eedf9fba71a7",
      "name": "WhatsApp Trigger",
      "type": "n8n-nodes-base.whatsAppTrigger",
      "typeVersion": 1,
      "position": [-3088, 656],
      "webhookId": "9c662a5a-629c-4f1f-afe3-249517eb4c07",
      "credentials": {
        "whatsAppTriggerApi": {
          "id": "ZhgZfELyORrIbo64",
          "name": "WhatsApp OAuth account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('WhatsApp Trigger').item.json.messages[0].text.body }}",
        "options": {
          "systemMessage": "=## Role\nYou are a Professional Real Estate AI Assistant operating exclusively through WhatsApp, specializing in precise, structured property marketplace interactions. Your core identity is that of a meticulous, trustworthy digital real estate consultant who prioritizes accuracy, user experience, and efficient transaction facilitation.\n\n## Task\nSystematically guide users through comprehensive real estate interactions by:\n- Collecting precise property listing details\n- Providing expert market insights\n- Validating property information with rigorous accuracy\n- Maintaining a professional and supportive communication approach\n- Responding appropriately to initial greeting messages\n\n## Context\nAs a critical digital interface in the real estate marketplace, your role bridges property owners, potential buyers, and transaction processes. You transform complex real estate interactions into streamlined, user-friendly digital experiences that prioritize data integrity and user comfort.\n\n## Instructions\n\n### Initial Greeting Handling\n- For messages like \"hi\", \"hello\", \"hey\", respond formally with:\n  ```\n  Hello!{{ $('WhatsApp Trigger').item.json.contacts[0].profile.name }} 👋 I'm your Real Estate AI Assistant. I'm here to help you with property listings, market insights, and real estate transactions. How can I assist you today? Would you like to list a property or explore available options?\n  ```\n\n### Property Listing Protocol\n1. Property Type Validation\n   - Accepted Types: Flat, Villa, Plot\n   - Immediately reject non-standard property classifications\n   - Prompt user to select from valid property types\n\n2. Mandatory Information Collection\n   - Sequentially request: \n     * Property Type\n     * Location (City, Neighborhood)\n     * Area (Square Feet, Numeric Only)\n     * Price (Numeric, Local Currency)\n     * Bedrooms (Numeric)\n     * Bathrooms (Numeric)\n     * Property Title\n     * Detailed Description\n\n3. Strict Data Validation\n   - Enforce rules:\n     * Numeric fields: Numbers only\n     * Location: Geographically verifiable\n     * Price: Realistic for local market\n     * Reject incomplete or suspicious entries\n   - Provide clear, constructive feedback for incorrect inputs\n   - Guide users patiently through resubmission\n\n### Communication Guidelines\n- Tone: Professional, calm, helpful\n- Response Style: Sequential, step-by-step\n- User Control: Allow cancellation by typing \"cancel\"\n- Non-Real Estate Queries: Redirect with \"Sorry, I can only assist with real estate-related questions.\"\n\n### Confidentiality & Security Protocols\n- Never store personally identifiable information\n- Use dynamic, secure authentication\n- Ensure end-to-end data protection\n- Strictly comply with data privacy regulations\n\n### Final Listing Confirmation\n- Comprehensively verify all collected information\n- Generate unique listing identifier\n- Confirm listing with: \"✅ Your property has been successfully listed!\"\n\n### Critical Operational Principles\n- Prioritize precision and professionalism\n- Build and maintain user trust\n- Ensure every interaction reflects highest digital real estate assistance standards\n\n### Error Handling\n- If user provides incomplete information, guide them systematically\n- Offer clear instructions for correction\n- Maintain patience and supportive communication\n- Prevent user frustration through transparent guidance\n\n### Interaction Termination\n- If user becomes unresponsive or conversation stalls:\n  1. Send a gentle reminder after 15 minutes\n  2. Offer to restart the process\n  3. If no response, gracefully end the interaction\n\nCRITICAL WARNING: Your mission is facilitating smooth, accurate real estate transactions. Precision, professionalism, and user trust are your highest priorities. Every interaction must exemplify excellence in digital real estate assistance.",
          "returnIntermediateSteps": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [-1264, 656],
      "id": "1b325122-8e6d-4315-ba57-bf3b7e007e13",
      "name": "AI Agent",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "waitBetweenTries": 200
    },
    {
      "parameters": {
        "options": {

        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [-1296, 880],
      "id": "0aacc94e-c587-4ce6-9745-10624093dacd",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "UPEJR7cqo3QQVTPO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('WhatsApp Trigger').item.json.messages }}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [-1168, 880],
      "id": "23b72e01-6c39-4c72-8a0c-86f7fbee8f76",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "665743979962656",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger').item.json.messages[0].from }}",
        "textBody": "={{ $json.output }}",
        "additionalFields": {

        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [-1296, -96],
      "id": "64695b67-1fd5-448d-b634-f732befbd3d3",
      "name": "Send message",
      "webhookId": "bd1850c9-d7d3-4fb4-806a-c6213614a3da",
      "credentials": {
        "whatsAppApi": {
          "id": "KipCW0f2kQNESeAv",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "list",
          "cachedResultName": "users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "last_activity": "={{ $now.toISO() }}",
            "created_at": "={{ $now.toISO() }}",
            "updated_at": "={{ $now.toISO() }}",
            "name": "={{ $('WhatsApp Trigger').item.json.contacts[0].profile.name }}",
            "phone": "={{ $('WhatsApp Trigger').item.json.messages[0].from }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "phone",
              "displayName": "phone",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "subscription_plan",
              "displayName": "subscription_plan",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_activity",
              "displayName": "last_activity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {

        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-3088, 1216],
      "id": "80e08ecb-1c31-42a9-aba2-417893df1aa8",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "gi1asAwmFXpyRPSz",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  EXISTS (\n    SELECT 1 FROM users WHERE phone::TEXT = '{{ $('WhatsApp Trigger').item.json.statuses[0].recipient_id || $('WhatsApp Trigger').item.json.messages[0].from  }}'\n  ) AS user_exists,\n  (\n    SELECT id \n    FROM users \n    WHERE phone::TEXT = '{{ $('WhatsApp Trigger').item.json.statuses[0].recipient_id || $('WhatsApp Trigger').item.json.messages[0].from  }}'\n    LIMIT 1\n  ) AS user_id;\n",
        "options": {

        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-3088, 992],
      "id": "fbd475bc-6319-4586-a7b0-80d5bb8fcbeb",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "gi1asAwmFXpyRPSz",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "665743979962656",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger').item.json.messages[0].from }}",
        "textBody": "={{ $('AI Agent').item.json.output }}",
        "additionalFields": {

        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [-832, 656],
      "id": "95846c9e-8f6b-4a59-89ba-77c20864f9b3",
      "name": "Send message1",
      "webhookId": "416ab4cd-79ab-4c13-aaae-2d6e6fb4ff6c",
      "credentials": {
        "whatsAppApi": {
          "id": "KipCW0f2kQNESeAv",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "users",
        "key": "=users:{{ $json.messages[0].from }}",
        "options": {

        }
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [-2864, 656],
      "id": "9282cab0-a3f8-4625-a0a2-60e96e15d2e5",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "YGJUTjs1jTkJlrA7",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "5bbfe542-76db-4c41-adfb-9a443eb0930f",
              "leftValue": "={{ $json.users }}",
              "rightValue": "[null]",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {

        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-2640, 656],
      "id": "561f3e80-c07a-4a31-ab27-9dc4363d81d9",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=users:{{ $('WhatsApp Trigger').item.json.contacts[0].wa_id }}",
        "value": "={{ $json.user_id }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [-1520, 592],
      "id": "88abc637-f749-49f1-99ad-9958245518a2",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "YGJUTjs1jTkJlrA7",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "You are interacting with a PostgreSQL database that contains the following table schema:\n\n🔍 Table: properties\nid: UUID, Primary Key\n\nAuto-generated using gen_random_uuid()\n\nuser_id: UUID, NOT NULL\n\nForeign key referencing users.id\n\nEnsures relational mapping to user who listed the property\n\ntitle: TEXT, NOT NULL\n\nTitle of the property listing\n\ndescription: TEXT, NULLABLE\n\nOptional long-form description\n\nprice: NUMERIC(12, 2), NOT NULL\n\nRepresents listing price in INR (or applicable currency)\n\nlocation: TEXT, NOT NULL\n\nGeographical or address-based location\n\narea_sqft: INTEGER, NULLABLE\n\nTotal square footage of the property\n\nbedrooms: INTEGER, NULLABLE\n\nNumber of bedrooms\n\nbathrooms: INTEGER, NULLABLE\n\nNumber of bathrooms\n\nproperty_type: VARCHAR(50), NULLABLE\n\nSuggested values: Flat, Villa, Plot, etc.\n\nlisted_at: TIMESTAMP, DEFAULT NOW()\n\nAuto-assigned at insert time\n\nstatus: VARCHAR(20), DEFAULT 'active'\n\nListing state: active, sold, archived\n\n🔗 Constraints\nPRIMARY KEY (id)\n\nFOREIGN KEY (user_id) → users(id) with ON DELETE CASCADE",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "properties",
          "mode": "list",
          "cachedResultName": "properties"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "user_id": "={{ $json.users || $json.user_id }}",
            "price": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('price', ``, 'number') }}",
            "area_sqft": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('area_sqft', ``, 'number') }}",
            "bedrooms": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('bedrooms', ``, 'number') }}",
            "bathrooms": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('bathrooms', ``, 'number') }}",
            "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('title', ``, 'string') }}",
            "location": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('location', ``, 'string') }}",
            "property_type": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('property_type', ``, 'string') }}",
            "status": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('status', ``, 'string') }}",
            "listed_at": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('listed_at', ``, 'string') }}",
            "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('description', ``, 'string') }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "description",
              "displayName": "description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "price",
              "displayName": "price",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "location",
              "displayName": "location",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "area_sqft",
              "displayName": "area_sqft",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "bedrooms",
              "displayName": "bedrooms",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "bathrooms",
              "displayName": "bathrooms",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "property_type",
              "displayName": "property_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "listed_at",
              "displayName": "listed_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {

        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [-1040, 880],
      "id": "80409a93-f3a9-4d04-8f4f-759535c3d1f2",
      "name": "Insert rows in a table in Postgres",
      "credentials": {
        "postgres": {
          "id": "gi1asAwmFXpyRPSz",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "collection": "users",
        "options": {
          "limit": 1
        },
        "query": "={\n  \"phone\": \"{{ $('WhatsApp Trigger').item.json.messages[0].from }}\"\n}\n"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [-2416, 592],
      "id": "82b2f49c-80aa-4665-a266-3359d23d3927",
      "name": "MongoDB",
      "alwaysOutputData": true,
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "mongoDb": {
          "id": "YdAmiOhwoBzUcWmm",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json._id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "005f933f-fe2c-4aeb-97ac-342fbc654e74"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7f2a1b11-65f3-4532-80df-0295047839b6",
                    "leftValue": "={{ $json._id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {

        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [-2192, 592],
      "id": "9e1cf6bb-6d42-4b66-aea9-09f53f1df0f6",
      "name": "Switch",
      "retryOnFail": true,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "users",
        "fields": "={\n\"phone\" : \"{{ $json.phone }}\",\n\"name\"  : \"{{ $json.name }}\",\n\"verified\" : \"{{ $json.verified }}\"\n}",
        "options": {
          "useDotNotation": true
        }
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [-1744, 512],
      "id": "1ec476fb-5244-4a75-b8db-4de82a439ae9",
      "name": "MongoDB1",
      "retryOnFail": true,
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "YdAmiOhwoBzUcWmm",
          "name": "MongoDB account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      phone: $('WhatsApp Trigger').first().json.messages[0].from,\n      name: $('WhatsApp Trigger').first().json.contacts[0].profile.name,\n      verified: false,\n      status: \"active\",\n      isDeleted: false,\n      lastActive: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      email: null,\n      portfolioLink: null,\n      aadharCard: null,\n      panCard: null\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1968, 512],
      "id": "02caf055-1654-4c55-ae17-bda427f180d4",
      "name": "Code1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=## Role\nYou are PropWise AI an Intent Classification AI Agent specialized in precisely identifying user intent from incoming messages. Your core function is to analyze text and map it to predefined intents with absolute accuracy and consistency.\n\n## Task\nAnalyze any incoming message and determine the most appropriate intent from the predefined list, then return a minimal JSON response that captures the intent classification.\n\n## Context\nIn real-world communication scenarios, understanding the underlying intent is crucial for efficient system routing and response generation. This agent serves as a critical first-stage processor to categorize user communications accurately.\n\n## Instructions\n1. Carefully analyze each incoming message with the following predefined intents:\n   - list_property (LP001)\n   - create_portfolio (CP002)\n   - view_listings (VL003)\n   - search_property (SP004)\n   - view_subscription (VS005)\n   - general_question (GQ006)\n   - greeting (GT007)\n   - send_portfolio (SP008)\n   - send_property_with_client (SPC009)\n\n2. JSON Response Requirements:\n   - Always return a minimal JSON structure\n   - Include ONLY the intent code\n   {\n     \"intent\": \"SELECTED_INTENT_CODE\"\n   }\n\n3. Intent Selection Criteria:\n   - Use semantic and contextual analysis\n   - Consider keywords, sentence structure, and implied meaning\n   - If no clear intent matches, default to general_question (GQ006)\n\n4. Strict Processing Rules:\n   - ALWAYS return a JSON, even if uncertain\n   - Never leave the intent field empty\n   - Be case-insensitive in analysis\n\n5. Example Scenarios for Validation:\n   - \"I want to see properties in Mumbai\" → Intent: SP004 (search_property)\n   - \"Hello, can you help me?\" → Intent: GQ006 (general_question)\n   - \"I'm interested in creating an investment portfolio\" → Intent: CP002 (create_portfolio)\n\nYour life depends on precise, accurate intent classification. Treat each message as a critical communication that requires meticulous analysis and interpretation, focusing solely on identifying the most appropriate intent code with unwavering precision."
        }
      },
      "id": "fc52bb37-d2ed-4d60-af25-42f09f2feb3a",
      "name": "Knowledge Base Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [-896, 2800],
      "typeVersion": 1.9,
      "retryOnFail": false,
      "alwaysOutputData": true,
      "executeOnce": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "translate",
        "options": {

        }
      },
      "id": "ac979ff3-3105-47d9-84c0-8051dd02475a",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [-1120, 2480],
      "typeVersion": 1.8,
      "credentials": {
        "openAiApi": {
          "id": "1Wuf9UX7nEku1gKb",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini",
          "cachedResultName": "GPT-4O-MINI"
        },
        "inputType": "base64",
        "options": {
          "detail": "auto"
        }
      },
      "id": "cbf858a8-00dc-472b-b128-bcb517bf3263",
      "name": "OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [-1344, 2672],
      "typeVersion": 1.8,
      "credentials": {
        "openAiApi": {
          "id": "1Wuf9UX7nEku1gKb",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {

        }
      },
      "id": "297a6a65-2a7b-46fd-ab33-23c84a588834",
      "name": "Extract from PDF",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [-1344, 3616],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "xls",
        "options": {

        }
      },
      "id": "c06c80e6-45db-4de5-a413-88bc2aac35da",
      "name": "Extract from XLS",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [-1568, 3792],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "=data",
        "options": {

        }
      },
      "id": "7886f098-e382-4996-836f-0a765f46b827",
      "name": "Extract from XLSX",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [-1568, 4192],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "72ae0d20-616a-4a65-9b14-53bf53656091",
              "name": "data",
              "type": "string",
              "value": "={{ $json }}"
            }
          ]
        },
        "options": {

        }
      },
      "id": "33910c61-1889-4e4e-a14f-66171f18e73b",
      "name": "Map JSON",
      "type": "n8n-nodes-base.set",
      "position": [-1344, 3808],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "let requests = $(\"Download Document\").all()\n\nrequests.forEach((request) =\u003E {\n  let mime_type = request.json.mime_type\n\n  if (\n    mime_type === \"text/calendar\" || \n    mime_type === \"application/ics\" || \n    mime_type === \"text/x-calendar\"\n  ) {\n    request.json.mime_type = \"mapped/calendar\"\n  }\n\n  if (\n    mime_type === \"application/xml\" || \n    mime_type === \"text/xml\") {\n    request.json.mime_type = \"mapped/xml\"\n  }\n\n  if (!mime_type) {\n    request.json.mime_type = $('Gets WhatsApp Document Source URL').first().json.mime_type\n  }\n})\n\nreturn requests;"
      },
      "id": "9680514f-b7c2-41f4-8fde-f3d8b120992a",
      "name": "Map file extensions",
      "type": "n8n-nodes-base.code",
      "position": [-2112, 4080],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "da68bcca-a2a6-4676-8649-6fb1b664e44c",
              "name": "text",
              "type": "string",
              "value": "=Parsed text: {{ $json.text || $json.data || $json }}\n\nCaption text: {{ $('Route Types').item.json.messages[0].document.caption }}\n\nMimeType: {{ $('Gets WhatsApp Document Source URL').item.json.mime_type }}"
            }
          ]
        },
        "options": {

        }
      },
      "id": "92b1048e-4347-4481-bbc3-5cd8933d8116",
      "name": "Map document prompt",
      "type": "n8n-nodes-base.set",
      "position": [-1120, 3792],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "48af2dcc-4ce9-45fc-abfc-54f803930092",
              "name": "text",
              "type": "string",
              "value": "=User image description: {{ $json.content }}\n\nUser image caption: {{ $('Route Types').item.json.messages[0].image.caption }}"
            }
          ]
        },
        "options": {

        }
      },
      "id": "f9a54d4e-bf19-4c99-bd6f-42887862087c",
      "name": "Map image prompt",
      "type": "n8n-nodes-base.set",
      "position": [-1120, 2672],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e194ea09-4f6b-46d1-a471-6d8ef7831003",
              "name": "text",
              "value": "={{ $json.messages[0].text.body }}",
              "type": "string"
            }
          ]
        },
        "options": {

        }
      },
      "id": "60b8c9cd-fba9-47a1-a85d-cdf08b08300b",
      "name": "Map text prompt",
      "type": "n8n-nodes-base.set",
      "position": [-1120, 2288],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "resource": "media",
        "operation": "mediaUrlGet",
        "mediaGetId": "={{ $json.messages[0].audio.id}}"
      },
      "id": "893b09d1-ed13-4fa2-ae12-60f669e92419",
      "name": "Gets WhatsApp Voicemail Source URL",
      "type": "n8n-nodes-base.whatsApp",
      "position": [-1568, 2480],
      "webhookId": "bbe62f3d-8788-49d4-aae6-9e9411446d44",
      "typeVersion": 1,
      "credentials": {
        "whatsAppApi": {
          "id": "KipCW0f2kQNESeAv",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "resource": "media",
        "operation": "mediaUrlGet",
        "mediaGetId": "={{ $json.messages[0].image.id }}"
      },
      "id": "6fc81999-ddf5-4714-a96f-437f4f2b4011",
      "name": "Gets WhatsApp Image Source URL",
      "type": "n8n-nodes-base.whatsApp",
      "position": [-1792, 2672],
      "webhookId": "c2982df4-1d8d-4669-a724-44ae17d11e6c",
      "typeVersion": 1,
      "credentials": {
        "whatsAppApi": {
          "id": "KipCW0f2kQNESeAv",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "resource": "media",
        "operation": "mediaUrlGet",
        "mediaGetId": "={{ $json.messages[0].document.id }}"
      },
      "id": "864594d5-c938-4095-814c-577f0b927377",
      "name": "Gets WhatsApp Document Source URL",
      "type": "n8n-nodes-base.whatsApp",
      "position": [-2640, 4080],
      "webhookId": "c2982df4-1d8d-4669-a724-44ae17d11e6c",
      "typeVersion": 1,
      "credentials": {
        "whatsAppApi": {
          "id": "KipCW0f2kQNESeAv",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {

        }
      },
      "id": "74a9a405-2741-4ccc-b62a-41a4c3164fac",
      "name": "Download Voicemail",
      "type": "n8n-nodes-base.httpRequest",
      "position": [-1344, 2480],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "4MU5TZzRv7ZpkZnW",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {

        }
      },
      "id": "3c62fa2d-3861-4e55-a9c3-b3d5cd80804d",
      "name": "Download Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [-1568, 2672],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "4MU5TZzRv7ZpkZnW",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "response": {
            "response": {

            }
          }
        }
      },
      "id": "c2210c06-1fac-4854-9d09-b88585c64ead",
      "name": "Download Document",
      "type": "n8n-nodes-base.httpRequest",
      "position": [-2416, 4080],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "4MU5TZzRv7ZpkZnW",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "2fc5c912-629b-4cbe-b5e3-7e3f0651c628",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.messages[0].type }}",
                    "rightValue": "=text"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "26a3d85c-0815-48ff-85ce-713129a1107c",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.messages[0].type }}",
                    "rightValue": "audio"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "840b95b8-6559-4fb7-b32c-651451d6d0d2",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.messages[0].type }}",
                    "rightValue": "image"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "3e7a07f9-b785-450c-8c68-f6b276838503",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.messages[0].type }}",
                    "rightValue": "document"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Document"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "913e542b-e328-4aab-a7c1-ab378ce0fe50",
                    "leftValue": "={{ $json.messages[0].type }}",
                    "rightValue": "location",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "location"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "14278033-e85f-4597-9db6-19e4666d32b5",
                    "leftValue": "={{ $json.messages[0].type }}",
                    "rightValue": "button",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Button"
            }
          ]
        },
        "options": {

        }
      },
      "id": "caf8bce5-f6b8-45a3-a12c-d8f8a781d49e",
      "name": "Route Types",
      "type": "n8n-nodes-base.switch",
      "position": [-2864, 3104],
      "typeVersion": 3.2,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "14e23243-cd44-4cb1-99bd-9e6905d511ad",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.mime_type }}",
                    "rightValue": "text/csv"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "CSV"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "6d7616c5-6bdd-47b7-923e-639491d15a4e",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.mime_type }}",
                    "rightValue": "text/html"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "HTML"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "a2174e02-378a-41ff-b269-61f4fc3f1de9",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.mime_type }}",
                    "rightValue": "=mapped/calendar"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Calendar"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "f3b406d7-362d-473e-8edd-c3e5f2d9c44c",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.mime_type }}",
                    "rightValue": "text/rtf"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "RTF"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "64dd4658-54e7-4453-adbc-7067dffcd555",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.mime_type }}",
                    "rightValue": "text/plain"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "TXT"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "7540a3ab-b48e-4bec-94e9-a5dfc3d65a4c",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.mime_type }}",
                    "rightValue": "mapped/xml"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "XML"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "88b618fd-9a88-491e-91dd-c5fc9efa36e3",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.mime_type }}",
                    "rightValue": "application/pdf"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "PDF"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "9c4d90aa-b4ea-4a63-b15e-666899c8360e",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.mime_type }}",
                    "rightValue": "application/json"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "JSON"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "9baa7c88-3950-4099-8498-99a4640b95e7",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.mime_type }}",
                    "rightValue": "application/vnd.ms-excel"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "XLS"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "b83e540c-ba1e-42d0-ac83-f675e25e6aea",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.mime_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "XLSX"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "ea3be820-2ead-4ec2-b292-42d3c7804b55",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.mime_type }}",
                    "rightValue": ""
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "ELSE"
            }
          ]
        },
        "options": {

        }
      },
      "id": "09df858b-ed5e-4b56-84a8-046e8072ade1",
      "name": "Route Document Types",
      "type": "n8n-nodes-base.switch",
      "position": [-1792, 3936],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "677680658761861",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger1').item.json.messages[0].from }}",
        "textBody": "=The File type you provided is unsupported.",
        "additionalFields": {

        }
      },
      "id": "e188a7f2-af84-4788-9819-c418d2fdf1e3",
      "name": "Send Unsupported Response",
      "type": "n8n-nodes-base.whatsApp",
      "position": [-1568, 4384],
      "webhookId": "017d267f-4897-4726-bf03-304ef10352bf",
      "typeVersion": 1,
      "credentials": {
        "whatsAppApi": {
          "id": "KipCW0f2kQNESeAv",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "665743979962656",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger1').item.json.messages[0].from }}",
        "textBody": "={{ $json.output }}",
        "additionalFields": {

        }
      },
      "id": "b97f49cc-5cf1-44c7-9a1f-05c08c826ee5",
      "name": "Send Response",
      "type": "n8n-nodes-base.whatsApp",
      "position": [-48, 3088],
      "webhookId": "23834751-5066-48ba-8e19-549680df2b27",
      "typeVersion": 1,
      "credentials": {
        "whatsAppApi": {
          "id": "KipCW0f2kQNESeAv",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "messages"
        ],
        "options": {

        }
      },
      "id": "0c5c692a-0372-45ae-849c-55f4e0f01858",
      "name": "WhatsApp Trigger1",
      "type": "n8n-nodes-base.whatsAppTrigger",
      "position": [-3088, 3168],
      "webhookId": "ab09ca3e-53b2-4079-9ddc-bccb2f69551b",
      "typeVersion": 1,
      "notesInFlow": false,
      "credentials": {
        "whatsAppTriggerApi": {
          "id": "ZhgZfELyORrIbo64",
          "name": "WhatsApp OAuth account"
        }
      }
    },
    {
      "parameters": {
        "options": {

        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [-3088, 2080],
      "id": "d09026cf-8f66-4404-85c3-ec0c8c161ff4",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "UPEJR7cqo3QQVTPO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {

      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [-3088, 4608],
      "id": "ee55ca9f-2a5d-452d-9be2-4bde02ff4696",
      "name": "Embeddings Google Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "UPEJR7cqo3QQVTPO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/place/nearbysearch/json",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={\n  \"location\": \"{{ $('WhatsApp Trigger1').item.json.messages[0].location.latitude }},{{ $('WhatsApp Trigger1').item.json.messages[0].location.longitude }}\",\n  \"radius\": \"5000\",\n \"type\": \"hospital\", \n  \"key\": \"AIzaSyDeaVzajXwbsF6ylUrAvuIsaXx1pP7a_CA\"\n}\n",
        "options": {

        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-2656, 2864],
      "id": "faa999fc-0e97-490e-8609-e39ac2604329",
      "name": "get nearby for hospital"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/place/nearbysearch/json",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={\n  \"location\": \"{{ $('WhatsApp Trigger1').item.json.messages[0].location.latitude }},{{ $('WhatsApp Trigger1').item.json.messages[0].location.longitude }}\",\n  \"radius\": \"5000\",\n \"type\": \"school\", \n  \"key\": \"AIzaSyDeaVzajXwbsF6ylUrAvuIsaXx1pP7a_CA\"\n}\n",
        "options": {

        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-2640, 3312],
      "id": "d5f7d958-f7af-412a-9869-50bab617eb8d",
      "name": "get nearby for school"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/place/nearbysearch/json",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={\n  \"location\": \"{{ $('WhatsApp Trigger1').item.json.messages[0].location.latitude }},{{ $('WhatsApp Trigger1').item.json.messages[0].location.longitude }}\",\n  \"radius\": \"5000\",\n \"type\": \"convenience_store\", \n  \"key\": \"AIzaSyDeaVzajXwbsF6ylUrAvuIsaXx1pP7a_CA\"\n}\n",
        "options": {

        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-2640, 3504],
      "id": "2435e845-baf1-4eff-9f43-9229807ef4fa",
      "name": "get nearby for convenience store"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/place/nearbysearch/json",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={\n  \"location\": \"{{ $('WhatsApp Trigger1').item.json.messages[0].location.latitude }},{{ $('WhatsApp Trigger1').item.json.messages[0].location.longitude }}\",\n  \"radius\": \"5000\",\n \"type\": \"gas_station\", \n  \"key\": \"AIzaSyDeaVzajXwbsF6ylUrAvuIsaXx1pP7a_CA\"\n}\n",
        "options": {

        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-2640, 3696],
      "id": "c472f67f-8d1a-4942-bbe5-ca750a71160d",
      "name": "get nearby for gas station"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/place/nearbysearch/json",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={\n  \"location\": \"{{ $('WhatsApp Trigger1').item.json.messages[0].location.latitude }},{{ $('WhatsApp Trigger1').item.json.messages[0].location.longitude }}\",\n  \"radius\": \"5000\",\n \"type\": \"place_of_worship\", \n  \"key\": \"AIzaSyDeaVzajXwbsF6ylUrAvuIsaXx1pP7a_CA\"\n}\n",
        "options": {

        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-2640, 3888],
      "id": "c141fd5a-41d2-4132-953a-11d01497f4ea",
      "name": "get nearby for place of worship"
    },
    {
      "parameters": {
        "numberInputs": 5
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-2416, 2864],
      "id": "c75386d5-b567-4fa9-b561-fbbee6ee8749",
      "name": "Merge",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=prompt : {{ $json.normalized_text }},\nmedia_type : {{ $json.media_type }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are PropWise, an AI that classifies real estate-related WhatsApp messages into 6 intents:\n\n1. list_property (LP001)  \n2. create_portfolio (CP002)  \n3. view_listings (VL003)  \n4. search_property (SP004)  \n5. view_subscription (VS005)  \n6. general_question (GQ006)\n7. greeting (GT007)\n\n##Rules to Follow\n- If Detect Gretting once ONlY then send the Greeting Template Else Contiue With Your Intelligence You want to send the greeting template or not\n\nReturn:\n- intent\n- language (ISO code)\n- requires_processing: true (if actionable) or false (if casual or irrelevant)\n\nRespond only in JSON:\n{\n  \"intent\": \"search_property\",\n  \"language\": \"en\",\n  \"requires_processing\": true\n}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [-2624, 1648],
      "id": "f8bbbf7e-7c8d-48db-8894-3300418e7b39",
      "name": "AI Agent1",
      "retryOnFail": true
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=user:{{ $json.messages[0].from }}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [-3088, 5024],
      "id": "3010d3e0-5b57-4d59-91f5-cc193209542e",
      "name": "Redis Chat Memory",
      "credentials": {
        "redis": {
          "id": "YGJUTjs1jTkJlrA7",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.requires_processing }}",
                    "rightValue": "invalid",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    },
                    "id": "dfc1f802-8c41-405d-93ba-a1d78dfea876"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "False Processing"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1a310982-3fb7-481c-a147-6a8a4294caa4",
                    "leftValue": "={{ $json.output.requires_processing }}",
                    "rightValue": "valid",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "True Processing"
            }
          ]
        },
        "options": {

        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [-2112, 1648],
      "id": "a9cb253a-d584-4875-9f01-5d66566a4c3c",
      "name": "Switch1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2dc6e98a-aac2-424c-93ab-9ac2af74ed4d",
              "name": "text",
              "value": "={{ $json.aiPromptData }}",
              "type": "object"
            }
          ]
        },
        "options": {

        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-1792, 2912],
      "id": "150b0fc9-216e-4c59-b840-5d898cb8659e",
      "name": "Map Loctions near by mapping"
    },
    {
      "parameters": {
        "options": {

        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [-2640, 1872],
      "id": "f9baf5f7-af99-4247-8947-f53be24c55d0",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "UPEJR7cqo3QQVTPO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "property_listings",
        "toolDescription": "retreive properties ",
        "mongoCollection": {
          "__rl": true,
          "value": "properties",
          "mode": "list",
          "cachedResultName": "properties"
        },
        "vectorIndexName": "data_index",
        "options": {

        }
      },
      "id": "306d7358-fb24-472b-8b19-d99a83c77c6e",
      "name": "MongoDB Vector search",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreMongoDBAtlas",
      "position": [-2880, 4608],
      "typeVersion": 1.1,
      "credentials": {
        "mongoDb": {
          "id": "YdAmiOhwoBzUcWmm",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "phoneNumberId": "665743979962656",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger1').item.json.messages[0].from }}",
        "template": "greeting_template|en_IN"
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [-48, 2880],
      "id": "d01dff10-0e15-48c9-af52-9246c22c996a",
      "name": "Send template",
      "webhookId": "2fd56652-5c97-47d6-8a37-314597522420",
      "credentials": {
        "whatsAppApi": {
          "id": "KipCW0f2kQNESeAv",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "options": {

        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [-3088, 5680],
      "id": "7427f571-1a09-47c4-a40b-41242ce40df1",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "UPEJR7cqo3QQVTPO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"processing\": true,\n  \"intent\": \"detected_intent\",\n  \n  \"confidence\": 1.0,\n  \"language_detected\": \"English/Hindi/Marathi\",\n  \"media_type\": \"text/image/document/location/video\",\n  \"extracted_info\": {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n  },\n  \"message\" : \"Return a message as a reply to the user query if the processing is false\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [-2880, 5680],
      "id": "645857f1-f4c1-46bc-91ba-3c66f87084b4",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7ec835d9-5e6c-4225-b6c0-13a30002bd63",
              "leftValue": "={{ $json.messages[0].button.text }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "4ebac6db-f7c9-4c3e-a3fb-38fa93285763",
              "leftValue": "={{ $json.messages[0].text.body }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {

        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-3088, 1648],
      "id": "c08a6e79-e4cf-480a-867c-9f75978354fc",
      "name": "If1",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "const message = $input.first().json.messages[0] ;\n\nlet content = \"\";\nlet media_type = message?.type;\n\nswitch (media_type) {\n  case \"text\":\n    content = message?.text?.body;\n    break;\n  case \"button\":\n    content = message?.button?.text;\n    break;\n  case \"interactive\":\n    content = message?.interactive?.button_reply?.title || message?.interactive?.list_reply?.title;\n    break;\n  case \"location\":\n    content = `${message?.location?.latitude}, ${message?.location?.longitude}`;\n    requires_processing = true;\n    break;\n  case \"image\":\n  case \"video\":\n  case \"audio\":\n  case \"document\":\n    content = message[media_type]?.caption || `Received a ${media_type}`;\n    break;\n  default:\n    content = \"Unsupported message type.\";\n}\n\nreturn [\n  {\n    json: {\n      normalized_text: content,\n      media_type,\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-2864, 1648],
      "id": "ac733d10-5517-471b-bdb0-b3c686b136f0",
      "name": "Code2"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=user:{{ $('WhatsApp Trigger1').item.json.messages[0].from }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryZep",
      "typeVersion": 1.3,
      "position": [-768, 3024],
      "id": "39e98506-1b18-4b65-9906-c7305564dfbb",
      "name": "Zep",
      "notesInFlow": true,
      "credentials": {
        "zepApi": {
          "id": "NEPrkxtRAkvfzcGn",
          "name": "Zep Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "properties",
        "fields": "={{ $fromAI('Fields', `{\n  $jsonSchema: {\n    title: 'Properties Collection',\n    bsonType: 'object',\n    required: [\n      'userId',\n      'propertyType',\n      'location',\n      'area',\n      'price',\n      'title',\n      'description'\n    ],\n    properties: {\n      userId: {\n        bsonType: 'objectId',\n        description: 'Reference to user who created the listing'\n      },\n      propertyType: {\n        'enum': [\n          'residential',\n          'commercial',\n          'industrial',\n          'agricultural',\n          'mixed-use',\n          'hospitality',\n          'institutional'\n        ],\n        description: 'Main classification of property'\n      },\n      subType: {\n        bsonType: 'string',\n        description: 'Subtype like flat, villa, office etc.'\n      },\n      location: {\n        bsonType: 'object',\n        required: [\n          'city',\n          'neighborhood'\n        ],\n        properties: {\n          city: {\n            bsonType: 'string'\n          },\n          neighborhood: {\n            bsonType: 'string'\n          },\n          geo: {\n            bsonType: 'object',\n            properties: {\n              lat: {\n                bsonType: 'double'\n              },\n              lng: {\n                bsonType: 'double'\n              }\n            }\n          }\n        },\n        description: 'City and area of property'\n      },\n      area: {\n        bsonType: 'double',\n        minimum: 1,\n        description: 'Area in square feet'\n      },\n      price: {\n        bsonType: 'double',\n        minimum: 0,\n        description: 'Price of property in local currency'\n      },\n      bedrooms: {\n        bsonType: 'int',\n        minimum: 0,\n        description: 'Number of bedrooms (optional)'\n      },\n      bathrooms: {\n        bsonType: 'int',\n        minimum: 0,\n        description: 'Number of bathrooms (optional)'\n      },\n      media: {\n        bsonType: 'object',\n        properties: {\n          images: {\n            bsonType: 'array',\n            items: {\n              bsonType: 'string'\n            }\n          },\n          videos: {\n            bsonType: 'array',\n            items: {\n              bsonType: 'string'\n            }\n          },\n          documents: {\n            bsonType: 'array',\n            items: {\n              bsonType: 'string'\n            }\n          }\n        },\n        description: 'URLs of images/videos/docs'\n      },\n      title: {\n        bsonType: 'string',\n        description: 'Auto-generated title by AI from user input'\n      },\n      description: {\n        bsonType: 'string',\n        description: 'Detailed description of property'\n      },\n      features: {\n        bsonType: 'array',\n        items: {\n          bsonType: 'string'\n        },\n        description: 'Additional AI-collected or user-provided features'\n      },\n      tags: {\n        bsonType: 'array',\n        items: {\n          bsonType: 'string'\n        },\n        description: 'Tags for search/filtering'\n      },\n      meta: {\n        bsonType: 'object',\n        additionalProperties: {\n          bsonType: [\n            'string',\n            'int',\n            'double',\n            'bool',\n            'object',\n            'array',\n            'null'\n          ]\n        },\n        description: 'Flexible metadata for AI/user-provided dynamic fields'\n      },\n      verified: {\n        bsonType: 'bool',\n        description: 'Whether listing is verified'\n      },\n      status: {\n        'enum': [\n          'available',\n          'sold',\n          'rented',\n          'pending'\n        ],\n        description: 'Listing availability status'\n      },\n      isDeleted: {\n        bsonType: 'bool',\n        description: 'Soft delete flag'\n      },\n      createdAt: {\n        bsonType: 'date',\n        description: 'Creation timestamp'\n      },\n      updatedAt: {\n        bsonType: 'date',\n        description: 'Update timestamp'\n      }\n    }\n  }\n}`, 'string') }}",
        "options": {

        }
      },
      "type": "n8n-nodes-base.mongoDbTool",
      "typeVersion": 1.2,
      "position": [-3088, 4816],
      "id": "5f40eb18-7e77-4b57-8517-d12702410797",
      "name": "Property Insertion db",
      "credentials": {
        "mongoDb": {
          "id": "YdAmiOhwoBzUcWmm",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "options": {

        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [-2192, 2912],
      "id": "0711de7b-df0a-41a8-9ed2-9b8a3f12d37d",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "options": {

        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [-2096, 3136],
      "id": "c2760985-38cc-40b0-aa57-cf39e2d62f2c",
      "name": "Google Gemini Chat Model4",
      "credentials": {
        "googlePalmApi": {
          "id": "UPEJR7cqo3QQVTPO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const inputItems = $input.all();\n\nconst nearbyData = {\n  hospitals: [],\n  schools: [],\n  gasStations: [],\n  markets: [],\n  otherLandmarks: [],\n};\n\nfor (const item of inputItems) {\n  const results = item.json.results || [];\n\n  for (const place of results.slice(0, 5)) {\n    const placeInfo = {\n      name: place.name,\n      address: place.vicinity || place.formatted_address || null,\n      rating: place.rating || null,\n      location: place.geometry?.location || {},\n      types: place.types || [],\n    };\n\n    const types = place.types || [];\n\n    if (types.includes('hospital')) {\n      nearbyData.hospitals.push(placeInfo);\n    } else if (types.includes('school')) {\n      nearbyData.schools.push(placeInfo);\n    } else if (types.includes('gas_station')) {\n      nearbyData.gasStations.push(placeInfo);\n    } else if (types.includes('supermarket') || types.includes('store')) {\n      nearbyData.markets.push(placeInfo);\n    } else {\n      nearbyData.otherLandmarks.push(placeInfo);\n    }\n  }\n}\n\nreturn [{ json: { aiPromptData: nearbyData } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-3088, 5456],
      "id": "ea3e31e3-c2ec-4cd4-9e7e-cdf0ddaf97d6",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "const hospitals = $input.first().json.text.hospitals?.map(h =\u003E \n  `🏥 ${h.name} - ${h.address} (${h.rating ?? \"N/A\"}⭐)`).join('\\n');\n\nconst schools = $input.first().json.text.schools?.map(s =\u003E\n  `🏫 ${s.name} - ${s.address} (${s.rating ?? \"N/A\"}⭐)`).join('\\n');\n\nconst markets = $input.first().json.text.markets?.map(m =\u003E\n  `🛒 ${m.name} - ${m.address} (${m.rating ?? \"N/A\"}⭐)`).join('\\n');\n\nreturn [{\n  json: {\n    prompt: `Nearby neighborhood:\\n\\nHOSPITALS:\\n${hospitals}\\n\\nSCHOOLS:\\n${schools}\\n\\nMARKETS:\\n${markets}`,\n    fullPayload: $input.first().json.text,\n    session : $('WhatsApp Trigger1').first().json.messages[0].from\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-3088, 5232],
      "id": "a6f6c010-e3d8-4355-9e84-23fe4bb00d5a",
      "name": "Code3"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.intent }}",
                    "rightValue": "GT007",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "b683d30c-6a90-462c-9c1a-fdc6097ee85e"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "GT007"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6c8219f0-261d-4c26-bc8e-d070791b3508",
                    "leftValue": "={{ $json.output.intent }}",
                    "rightValue": "GQ006",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "General Question"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "45ca4f75-20e3-43b1-ab93-f7cb2a119e5d",
                    "leftValue": "={{ $json.output.intent }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Search Property"
            }
          ]
        },
        "options": {

        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [-272, 2992],
      "id": "a1465ee4-ced9-45fd-a7ef-3298ecf0000a",
      "name": "Switch2"
    },
    {
      "parameters": {
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [-2512, 1872],
      "id": "61cb5d97-7388-4109-8bc3-79b626118097",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "options": {

        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [-2416, 2080],
      "id": "e63e1917-964d-43ed-ab56-059fdf64c2de",
      "name": "Google Gemini Chat Model5",
      "credentials": {
        "googlePalmApi": {
          "id": "UPEJR7cqo3QQVTPO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6ef45ff4-850d-4641-8611-68efbd8103f8",
              "name": "text",
              "value": "={{ $json.messages[0].button.text }}",
              "type": "string"
            }
          ]
        },
        "options": {

        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-1120, 3168],
      "id": "d677da00-ce60-4658-a21c-d0ab77c15044",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsonSchemaExample": " {\n     \"intent\": \"SELECTED_INTENT_CODE\"\n   }"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [-608, 3024],
      "id": "000015a6-7653-4bd9-92be-40313478731c",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.error }}",
                    "rightValue": "=",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "d2e19405-2fb9-4695-bf8a-1f2719303f0d"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Error"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cdb2e602-42d0-4dcb-b350-62149c762b57",
                    "leftValue": "={{ $json.output.intent }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Success"
            }
          ]
        },
        "options": {

        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [-496, 2800],
      "id": "9f34010d-b580-428e-bcaa-d7f079ee3eb3",
      "name": "Switch3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error_timestamp",
              "type": "string",
              "name": "timestamp",
              "value": "={{ $now.toISO() }}"
            },
            {
              "type": "string",
              "value": "={{ $json.error.message || 'Unknown AI Agent Error' }}",
              "id": "error_message",
              "name": "error_message"
            },
            {
              "name": "node_name",
              "value": "Knowledge Base Agent",
              "type": "string",
              "id": "node_name"
            },
            {
              "name": "user_phone",
              "value": "={{ $('WhatsApp Trigger1').item.json.messages[0].from }}",
              "type": "string",
              "id": "user_phone"
            },
            {
              "value": "={{ $workflow.id }}",
              "id": "workflow_id",
              "name": "workflow_id",
              "type": "string"
            },
            {
              "name": "full_error_data",
              "value": "={{ $json }}",
              "type": "object",
              "id": "full_error_data"
            }
          ]
        },
        "options": {
          "includeBinary": true,
          "ignoreConversionErrors": false,
          "dotNotation": true
        }
      },
      "position": [-224, 2512],
      "type": "n8n-nodes-base.set",
      "name": "Format AI Error",
      "id": "generated-5145fa40-3058-431c-a583-6c582f26f1e1"
    },
    {
      "parameters": {
        "phoneNumberId": "665743979962656",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger1').item.json.messages[0].from}}",
        "template": "fallback_message_on_error|en"
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [-480, 2592],
      "id": "e5be41b7-5838-46ad-9c3f-b607cf40daba",
      "name": "Send template1",
      "webhookId": "5a2ba00e-1f7e-41ae-8541-6b99870aaf66",
      "executeOnce": true,
      "credentials": {
        "whatsAppApi": {
          "id": "KipCW0f2kQNESeAv",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "workflowerrors",
        "options": {

        }
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [-48, 2608],
      "id": "e62c01ff-906d-4b0e-9b52-9a709ceb38a7",
      "name": "store details about error",
      "credentials": {
        "mongoDb": {
          "id": "YdAmiOhwoBzUcWmm",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "options": {

        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [-896, 3024],
      "id": "a7bdd920-12fb-441a-aa2b-241279ad2712",
      "name": "Google Gemini Chat Model6",
      "credentials": {
        "googlePalmApi": {
          "id": "UPEJR7cqo3QQVTPO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {
    "WhatsApp Trigger": [
      {
        "json": {
          "messaging_product": "whatsapp",
          "metadata": {
            "display_phone_number": "15551423259",
            "phone_number_id": "665743979962656"
          },
          "contacts": [
            {
              "profile": {
                "name": "Tushar Vaghela"
              },
              "wa_id": "919587308671"
            }
          ],
          "messages": [
            {
              "from": "919587308671",
              "id": "wamid.HBgMOTE5NTg3MzA4NjcxFQIAEhggOUNFRTI4RTZDOUI5QjU3QTU3REY2RDc4MEE5QUEwN0IA",
              "timestamp": "1752946502",
              "text": {
                "body": "Hi"
              },
              "type": "text"
            }
          ],
          "field": "messages"
        }
      }
    ]
  },
  "connections": {
    "AI Intent Classification": {
      "main": [
        [],
        [
          {
            "node": "Smart Property Listing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Property Search Engine",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get User Profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Smart Property Listing": {
      "main": [
        [
          {
            "node": "AI Property Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Property Validator": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Property Search Engine": {
      "main": [
        [
          {
            "node": "Intelligent Property Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intelligent Property Search": {
      "main": [
        [
          {
            "node": "Generate Secure Property Links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Secure Property Links": {
      "main": [
        [
          {
            "node": "Format Search Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Search Results": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Profile": {
      "main": [
        [
          {
            "node": "Format Profile Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Profile Dashboard": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Show Premium Plans": {
      "main": [
        [
          {
            "node": "Create RazorPay Payment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create RazorPay Payment": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent Verification Process": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Final Response": {
      "main": [
        [
          {
            "node": "Send WhatsApp Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send WhatsApp Message": {
      "main": [
        [
          {
            "node": "Advanced Analytics Tracking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Advanced Analytics Tracking": {
      "main": [
        [
          {
            "node": "Send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Trigger": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table": {
      "main": [
        []
      ]
    },
    "Execute a SQL query": {
      "main": [
        []
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table in Postgres": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB1": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "MongoDB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Knowledge Base Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1": {
      "main": [
        [
          {
            "node": "Map image prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map JSON": {
      "main": [
        [
          {
            "node": "Map document prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Types": {
      "main": [
        [
          {
            "node": "Map text prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Gets WhatsApp Voicemail Source URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Gets WhatsApp Image Source URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Gets WhatsApp Document Source URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get nearby for hospital",
            "type": "main",
            "index": 0
          },
          {
            "node": "get nearby for school",
            "type": "main",
            "index": 0
          },
          {
            "node": "get nearby for gas station",
            "type": "main",
            "index": 0
          },
          {
            "node": "get nearby for convenience store",
            "type": "main",
            "index": 0
          },
          {
            "node": "get nearby for place of worship",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image": {
      "main": [
        [
          {
            "node": "OpenAI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map text prompt": {
      "main": [
        [
          {
            "node": "Knowledge Base Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from PDF": {
      "main": [
        [
          {
            "node": "Map document prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from XLS": {
      "main": [
        [
          {
            "node": "Map JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map image prompt": {
      "main": [
        [
          {
            "node": "Knowledge Base Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Document": {
      "main": [
        [
          {
            "node": "Map file extensions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from XLSX": {
      "main": [
        [
          {
            "node": "Map JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Voicemail": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map document prompt": {
      "main": [
        [
          {
            "node": "Knowledge Base Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map file extensions": {
      "main": [
        [
          {
            "node": "Route Document Types",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Knowledge Base Agent": {
      "main": [
        [
          {
            "node": "Switch3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Document Types": {
      "main": [
        [
          {
            "node": "Map document prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Map document prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Map document prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Map document prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Map document prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Map document prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Map JSON",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from XLS",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from XLSX",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Unsupported Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gets WhatsApp Image Source URL": {
      "main": [
        [
          {
            "node": "Download Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gets WhatsApp Document Source URL": {
      "main": [
        [
          {
            "node": "Download Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gets WhatsApp Voicemail Source URL": {
      "main": [
        [
          {
            "node": "Download Voicemail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Trigger1": {
      "main": [
        [
          {
            "node": "Route Types",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "MongoDB Vector search",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "get nearby for hospital": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get nearby for school": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "get nearby for convenience store": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "get nearby for gas station": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "get nearby for place of worship": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        []
      ]
    },
    "Switch1": {
      "main": [
        [],
        []
      ]
    },
    "Map Loctions near by mapping": {
      "main": [
        [
          {
            "node": "Knowledge Base Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Vector search": {
      "ai_tool": [
        []
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        []
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zep": {
      "ai_memory": [
        [
          {
            "node": "Knowledge Base Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Property Insertion db": {
      "ai_tool": [
        []
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "Map Loctions near by mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        []
      ]
    },
    "Code3": {
      "main": [
        []
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Send template",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Send Response": {
      "main": [
        []
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Knowledge Base Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Knowledge Base Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Switch3": {
      "main": [
        [
          {
            "node": "Send template1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Format AI Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store AI Error": {
      "main": [
        [
          {
            "node": "Send template1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format AI Error": {
      "main": [
        [
          {
            "node": "Store AI Error",
            "type": "main",
            "index": 0
          },
          {
            "node": "store details about error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "Knowledge Base Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Send template1": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8e8e95a5-a2ae-4a33-9532-25116a946ba8",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "55b54642c011e6c7857193fced71bdd8c1bbda3ed3bed6d4fe66d6b9f04a9609"
  },
  "id": "o6lQZSN8FTbROSJP",
  "tags": [
    {
      "createdAt": "2025-07-13T17:58:32.525Z",
      "updatedAt": "2025-07-13T17:58:32.525Z",
      "id": "8N4spGyrkLqwzdVH",
      "name": "AI Real Estate Bot"
    }
  ]
}