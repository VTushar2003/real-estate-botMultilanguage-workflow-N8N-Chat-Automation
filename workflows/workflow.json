{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook",
        "responseMode": "onReceived",
        "responseData": {
          "statusCode": 200,
          "responseBody": "Message received"
        }
      },
      "id": "WhatsApp Trigger",
      "name": "WhatsApp Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [100, 300]
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { phone: $json.messages[0].from } }];"
      },
      "id": "Extract Phone",
      "name": "Extract Phone",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [300, 300]
    },
    {
      "parameters": {
        "query": "SELECT * FROM users WHERE phone = '{{ $json.phone }}';"
      },
      "id": "Check User Exists",
      "name": "Check User Exists",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [500, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.length > 0 }}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      },
      "id": "User Exists Check",
      "name": "User Exists Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [700, 300]
    },
    {
      "parameters": {
        "functionCode": "const Redis = require('ioredis');\nconst redis = new Redis();\n\nconst phone = $json.phone;\nconst key = `user:${phone}:listing_step`;\n\nreturn redis.get(key).then(step => {\n  if (!step) {\n    redis.set(key, 'property_type');\n    return { json: { next_question: 'What type of property would you like to list?' } };\n  }\n\n  if (step === 'property_type') {\n    redis.set(key, 'location');\n    redis.set(`user:${phone}:property_type`, $json.messages[0].text.body);\n    return { json: { next_question: 'What is the location of the property?' } };\n  }\n\n  if (step === 'location') {\n    redis.set(key, 'price');\n    redis.set(`user:${phone}:location`, $json.messages[0].text.body);\n    return { json: { next_question: 'What is the expected price?' } };\n  }\n\n  if (step === 'price') {\n    redis.set(`user:${phone}:price`, $json.messages[0].text.body);\n    const data = {\n      phone,\n      property_type: await redis.get(`user:${phone}:property_type`),\n      location: await redis.get(`user:${phone}:location`),\n      price: $json.messages[0].text.body\n    };\n    await redis.del(key);\n    await redis.del(`user:${phone}:property_type`);\n    await redis.del(`user:${phone}:location`);\n    await redis.del(`user:${phone}:price`);\n    return { json: { insert: true, data } };\n  }\n});"
      },
      "id": "Conversation Logic",
      "name": "Conversation Logic",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "table": "properties",
        "columns": ["phone", "property_type", "location", "price"],
        "values": [
          "={{ $json.data.phone }}",
          "={{ $json.data.property_type }}",
          "={{ $json.data.location }}",
          "={{ $json.data.price }}"
        ]
      },
      "id": "Insert Listing",
      "name": "Insert Listing",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1100, 300]
    },
    {
      "parameters": {
        "chatResponse": "={{ $json.next_question || 'Your property has been listed successfully!' }}"
      },
      "id": "Respond to WhatsApp",
      "name": "Respond to WhatsApp",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1300, 300]
    }
  ],
  "connections": {
    "WhatsApp Trigger": {
      "main": [[{ "node": "Extract Phone", "type": "main", "index": 0 }]]
    },
    "Extract Phone": {
      "main": [[{ "node": "Check User Exists", "type": "main", "index": 0 }]]
    },
    "Check User Exists": {
      "main": [[{ "node": "User Exists Check", "type": "main", "index": 0 }]]
    },
    "User Exists Check": {
      "main": [
        [{ "node": "Conversation Logic", "type": "main", "index": 0 }],
        []
      ]
    },
    "Conversation Logic": {
      "main": [
        [
          { "node": "Insert Listing", "type": "main", "index": 0 },
          { "node": "Respond to WhatsApp", "type": "main", "index": 0 }
        ]
      ]
    },
    "Insert Listing": {
      "main": [[{ "node": "Respond to WhatsApp", "type": "main", "index": 0 }]]
    }
  }
}
